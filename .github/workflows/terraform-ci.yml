name: Terraform CI/CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint-and-validate:
    name: Lint and Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.2  # Adjust to your Terraform version

      - name: Configure Terraform Credentials
        run: |
            mkdir -p $HOME/.terraform.d
            echo "credentials \"app.terraform.io\" {token = \"$TFE_TOKEN\"}" > $HOME/.terraform.d/credentials.tfrc.json
        env:
            TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
      
      - name: Terraform Init  # Added step
        run: terraform init  # This will download the providers

      - name: Terraform Validate
        run: terraform validate

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Terraform Lint
        run: |
          tflint

  check-pr-title:
    name: Check PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Check PR Title
        id: check_pr_title
        uses: actions/github-script@v3
        with:
          script: |
            const { data: pr } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const prTitle = pr.title;
            const validPrefixes = ["feat:", "bug:", "release:", "fix"];
            const isValid = validPrefixes.some(prefix => prTitle.startsWith(prefix));

            if (!isValid) {
              core.setFailed(`PR title must start with one of the following: ${validPrefixes.join(", ")}`);
            }


 terraform-cloud-plan:
    name: Terraform Plan on Terraform Cloud
    runs-on: ubuntu-latest
    needs: [lint-and-validate, check-pr-title]
    steps:
      - name: Trigger Terraform Plan in Terraform Cloud
        id: trigger-plan
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TERRAFORM_WORKSPACE_ID: ${{ secrets.TERRAFORM_WORKSPACE_ID }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $TFE_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
                  "data": {
                    "attributes": {
                      "is-destroy": false,
                      "message": "Triggered by GitHub Actions for PR",
                      "plan-only": true
                    },
                    "type": "runs",
                    "relationships": {
                      "workspace": {
                        "data": {
                          "type": "workspaces",
                          "id": "'"$TERRAFORM_WORKSPACE_ID"'"
                        }
                      }
                    }
                  }
                }' \
            https://app.terraform.io/api/v2/runs)
          
          # Debugging: Print the entire API response
          echo "Full API response:"
          echo "$response"

          run_id=$(echo $response | jq -r '.data.id')
          echo "Run ID: $run_id"

          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Run ID is null or empty. Exiting."
            exit 1
          fi

          echo "run_id=$run_id" >> $GITHUB_ENV

  trigger-terraform-cloud:
    name: Trigger Terraform Cloud Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Terraform Apply in Terraform Cloud
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          TERRAFORM_WORKSPACE_ID: ${{ secrets.TERRAFORM_WORKSPACE_ID }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $TFE_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{"data":{"type":"runs","attributes":{"message":"Triggered by GitHub Actions - Merge to Main"},"relationships":{"workspace":{"data":{"type":"workspaces","id":"'"$TERRAFORM_WORKSPACE_ID"'""}}}}}' \
            https://app.terraform.io/api/v2/runs)
          
          # Debugging: Print the entire API response
          echo "Full API response:"
          echo "$response"

          run_id=$(echo $response | jq -r '.data.id')
          echo "Run ID: $run_id"

          if [ -z "$run_id" ] || [ "$run_id" == "null" ]; then
            echo "Run ID is null or empty. Exiting."
            exit 1
          fi

          echo "run_id=$run_id" >> $GITHUB_ENV

      - name: Wait for Terraform Apply to Complete
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          run_id: ${{ env.run_id }}
        run: |
          status="pending"
          while [ "$status" != "applied" ] && [ "$status" != "errored" ]; do
            sleep 15
            response=$(curl -s -X GET \
              -H "Authorization: Bearer $TFE_TOKEN" \
              -H "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/runs/$run_id")
            status=$(echo $response | jq -r '.data.attributes.status')
            echo "Current status: $status"
          done
